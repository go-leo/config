// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package configs

import (
	context "context"
	config "github.com/go-leo/config"
	resource "github.com/go-leo/config/resource"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var (
	_ApplicationConfig      = &Application{}
	_ApplicationConfigMutex sync.RWMutex
)

func GetApplicationConfig() *Application {
	_ApplicationConfigMutex.RLock()
	cloned := proto.Clone(_ApplicationConfig)
	_ApplicationConfigMutex.RUnlock()
	return cloned.(*Application)
}

func SetApplicationConfig(conf *Application) {
	cloned := proto.Clone(conf).(*Application)
	_ApplicationConfigMutex.Lock()
	_ApplicationConfig = cloned
	_ApplicationConfigMutex.Unlock()
}

func LoadApplicationConfig(ctx context.Context, resources ...resource.Resource) error {
	conf, err := config.Load[*Application](ctx, resources...)
	if err != nil {
		return err
	}
	SetApplicationConfig(conf)
	return nil
}

func WatchApplicationConfig(ctx context.Context, resources ...resource.Resource) (<-chan struct{}, func(context.Context) error, error) {
	notifyC := make(chan *Application)
	errC := make(chan error)
	stop, err := config.Watch(ctx, notifyC, errC, resources...)
	if err != nil {
		return nil, nil, err
	}
	changedC := make(chan struct{}, 1)
	go func() {
		for {
			select {
			case <-ctx.Done():
				return
			case conf := <-notifyC:
				SetApplicationConfig(conf)
				select {
				case <-ctx.Done():
					return
				case changedC <- struct{}{}:
				default:
				}
			}
		}
	}()
	return changedC, stop, nil
}
